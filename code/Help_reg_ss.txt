Title

    reg_ss -- Computes confidence intervals, standard errors, and p-values in a linear regression in which the regressor of interest has a shift-share structure. Several different
              inference methods can be computed.

Syntax

    reg_ss depvar , shiftshare_var(varlist) share_varlist(varlist) [control_varlist(varlist) weight_var(varlist) akmtype beta0 path_cluster cluster_var(varlist) alpha]

     Options                       Description
    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Model
    * shiftshare_var(varlist)       Shift-share regressor of interest.
    * share_varlist(varlist)        List of variables containing the sector shares. Each variable indicates the regional shares corresponding to the corresponding sector. Varlist must
                                    contain as many variables as there are sectors in the analysis.
    * alpha                         Determines confidence level of reported confidence intervals, which will have coverage 1-alpha. Its default value is 0.05.

    -------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------
    Other
      control_varlist(varlist)      List of control variables to be included.
      weight_var(varlist)           Weights to be used in the fitting process. If specified, weighted least squares are used; otherwise, ordinary least squares are used.
      akmtype                       Specifies which inference method to use. It must equal 0 or 1. If it equals 1, "reg_ss" applies the AKM inference procedure described in Adão,
                                    Kolesár, and Morales (2019). If it equals 0, "reg_ss" applies the AKM0 inference procedure described in Adão, Kolesár, and Morales (2019). If it
                                    equals 0, the reported standard error corresponds to the normalized standard error, given by the length of the corresponding confidence interval
                                    divided by 2*z(1-alpha/2). Its default value is 1.
      beta0                         Null that is tested when "akmtype" equals 0 (only affects reported p-values).
      path_cluster                  The path to the .dta file that stores the cluster information corresponding to each sector. Provide this path if you want to account for sectoral
                                    clusters.
      cluster_var                   The variable name of the cluster variable in the .dta file storing the cluster information corresponding to each sector. The order of the sectors in
                                    this .dta file should be the same as the order of the sectors in the "varlist" containing the sector shares (the "share_varlist").

Note on collinear sectors
    Let W denote the share matrix with the (i,s) element given by w_is. Suppose that columns of W are collinear, so it that it has rank S_0 < S. Without loss of generality, suppose that
    the first S_0 columns of the matrix are full rank, so that the collinearity is caused by the last S − S_0 sectors. In this case, it is not possible to recover, tilde(X)_s, the
    sectoral shifters with the controls partialled out, and the reg_ss function will return an error message "Share matrix is collinear".  The researcher can either (i) drop the
    collinear sectors (ii) aggregate the sectors, or (iii) if the only controls are those with shift-share structure, and we have data on Zs, we can estimate tilde(X)_s by running a
    sector-level regression of Xs onto Zs , and taking the residual. This third option is not currently implemented in this package. Note that options (i) and (ii) change the definition
    of the estimand. Since they involve changing the shock vector X_i , this has to be done before using the reg_ss function.

Note on Dataset Preparation
    Before running regressions using reg_ss, please make sure there are no missing values in all variables that you pass to the program.

Examples
The data for these examples may be downloaded from https://github.com/zhangxiang0822/ShiftShareSEStata/blob/master/data/ADH_derived.dta

We use a subset of data from Autor, Dorn, and Hanson (2013, ADH) to illustrate the confidence intervals implemented in this package. The variables in the ADH dataset are listed below.
- d_sh_empl: Change in the share of working-age population.
- d_sh_empl_mfg: Change in the share of working-age population employed in manufacturing.
- d_sh_empl_nmfg: Change in the share of working-age population employed in non-manufacturing.
- d_tradeusch_pw: Change in sectoral U.S. imports from China normalized by U.S. total employment in the corresponding sector, aggregated to regional level. This is the variable of 
	interest in ADH.
- d_tradeotch_pw_lag: Change in sectoral imports from China by by a set of high-income countries other than the U.S. normalized by the beginning-of-the period U.S. 
total employment in the corresponding sector, aggregated to the regional level. This is the instrumental variable in ADH.
- emp_share1 - emp_share770: The local employment share by region from the first to the 770th sector.
- weight: Start-of-period share of U.S. population in each commuting zone (CZ).
- state: State FIPS code.
- czone: CZ identification number.
- t2: Indicator for the period 2000-2007, which corresponds to the second period in the sample.
- l_shind_manuf_cbp: Manufacturing employment share in each CZ (in percentage terms).
- l_sh_popedu_c: College-educated population share in each CZ (in percentage terms).
- l_sh_popfborn: Foreign-born population share in each CZ (in percentage terms).
- l_sh_empl_f: Female employment share in each CZ (in percentage terms).
- l_sh_routine33: Share of employment in routine occupations in each CZ (in percentage terms).
- l_task_outsource: Offshorability index of occupations in each CZ.

Example 1: AKM, no cluster
        .  use "data/ADH_derived.dta", clear
        .  local control_varlist t2 l_shind_manuf_cbp reg_encen reg_escen reg_midatl reg_mount reg_pacif reg_satl reg_wncen reg_wscen l_sh_popedu_c l_sh_popfborn l_sh_empl_f
            l_sh_routine33 l_task_outsource
        .  reg_ss d_sh_empl, shiftshare_var(d_tradeotch_pw_lag) control_varlist(`control_varlist') share_varlist(emp_share1-emp_share770) weight_var(weight) alpha(0.05) akmtype(1)

Example 2: AKM0, no cluster
Be sure to put "sector_derived.dta" to your local path
        .  use "data/ADH_derived.dta", clear
        .  local control_varlist t2 l_shind_manuf_cbp reg_encen reg_escen reg_midatl reg_mount reg_pacif reg_satl reg_wncen reg_wscen l_sh_popedu_c l_sh_popfborn l_sh_empl_f
            l_sh_routine33 l_task_outsource
        .  local local_path "data/sector_derived.dta"
        .  reg_ss d_sh_empl, shiftshare_var(d_tradeotch_pw_lag) control_varlist(`control_varlist') share_varlist(emp_share1-emp_share770) weight_var(weight) alpha(0.05) akmtype(0)

Example 3: AKM, clustered at three digit SIC level
        .  use "data/ADH_derived.dta", clear
        .  local control_varlist t2 l_shind_manuf_cbp reg_encen reg_escen reg_midatl reg_mount reg_pacif reg_satl reg_wncen reg_wscen l_sh_popedu_c l_sh_popfborn l_sh_empl_f
            l_sh_routine33 l_task_outsource
        .  local local_path "data/sector_derived.dta"
        .  reg_ss d_sh_empl, shiftshare_var(d_tradeotch_pw_lag) control_varlist(`control_varlist') share_varlist(emp_share1-emp_share770) weight_var(weight) alpha(0.05) akmtype(1)
            path_cluster("data/sector_derived.dta") cluster_var(sec_3d)

Example 4: AKM0, clustered at three digit SIC level
Be sure to put "sector_derived.dta" to your local path
        .  use "data/ADH_derived.dta", clear
        .  local control_varlist t2 l_shind_manuf_cbp reg_encen reg_escen reg_midatl reg_mount reg_pacif reg_satl reg_wncen reg_wscen l_sh_popedu_c l_sh_popfborn l_sh_empl_f
            l_sh_routine33 l_task_outsource
        .  local local_path "data/sector_derived.dta"
        .  reg_ss d_sh_empl, shiftshare_var(d_tradeotch_pw_lag) control_varlist(`control_varlist') share_varlist(emp_share1-emp_share770) weight_var(weight) alpha(0.05) akmtype(0)
            path_cluster("data/sector_derived.dta") cluster_var(sec_3d)

For more examples, please see "https://github.com/zhangxiang0822/BartikSEStata/blob/master/code/ADHapplication.do".

Stored results

    reg_ss stores the following in e():

    Scalars        
      e(b)                Estimate of the coefficient on the shift-share regressor
      e(se)               Standard error of the estimate of the coefficient on the shift-share regressor
      e(CI_low)           Lower bound of the confidence interval for the coefficient on the shift-share regressor
      e(CI_upp)           Upper bound of the confidence interval for the coefficient on the shift-share regressor
      e(p)                P-value for the null hypothesis that the coefficient on the shift-share regressor equals zero

Bug Reporting
    Please, submit bugs, comments, and suggestions to the Github repository at "https://github.com/zhangxiang0822/BartikSEStata". You are free to open an issue.

                         
Author
    Rodrigo Adão
    rodrigo.adao@chicagobooth.edu

    Michal Kolesár
    mkolesar@princeton.edu

    Eduardo Morales
    ecmorale@princeton.edu

    Xiang Zhang
    xiangzhang@princeton.edu

Reference
    Adão, Rodrigo, Michal Kolesár, and Eduardo Morales (2019) “Shift-share Designs: Theory and Inference”. Quarterly Journal of Economics, forthcoming.
    https://doi.org/10.1093/qje/qjz025

    David, H., David Dorn, and Gordon H. Hanson (2013) "The China Syndrome: Local Labor Market Effects of Import Competition in the United States." American Economic Review, 103, no. 6,
    (2013): 2121-2168.

    You may find a MATLAB version of this code is available at "https://github.com/kolesarm/ShiftShareSEMatlab".
 
    You may find a R version of this code is available code at "https://github.com/kolesarm/ShiftShareSE".
